[DA-ITSI-TELEGRAF-KAFKA-kafka-topics]
alert_lag = 30
alert_period = 1
base_search = | mstats avg(_value) as value where `telegraf_kafka_index` metric_name="kafka_topic.MessagesInPerSec.OneMinuteRate" OR metric_name="kafka_topic.BytesInPerSec.OneMinuteRate" OR metric_name="kafka_topic.BytesOutPerSec.OneMinuteRate" OR metric_name="kafka_topic.BytesRejectedPerSec.OneMinuteRate" OR metric_name="kafka_topic.FailedFetchRequestsPerSec.OneMinuteRate" OR metric_name="kafka_topic.FailedProduceRequestsPerSec.OneMinuteRate" OR metric_name="kafka_topic.TotalFetchRequestsPerSec.OneMinuteRate" OR metric_name="kafka_topic.TotalProduceRequestsPerSec.OneMinuteRate" jolokia_agent_url=* topic!="__*" span=10s by metric_name, env, label, topic\
| eval {metric_name}=value\
| stats first(kafka_topic.*.OneMinuteRate) as "*" by _time, env, label, topic\
| eval KbytesInPerSec=round(BytesInPerSec/1024, 3), KbytesOutPerSec=round(BytesOutPerSec/1024, 3), MessagesInPerSec=round(MessagesInPerSec, 3), TotalFetchRequestsPerSec=round(TotalFetchRequestsPerSec, 3), TotalProduceRequestsPerSec=round(TotalProduceRequestsPerSec, 3)\
| eval kafka_topic = env . ":" . label . ":" . topic\
| fields _time, env, label, kafka_topic, KbytesInPerSec, KbytesOutPerSec, MessagesInPerSec, BytesRejectedPerSec, FailedFetchRequestsPerSec, FailedProduceRequestsPerSec, TotalFetchRequestsPerSec, TotalProduceRequestsPerSec
description = This KPI basesearch provides insight monitoring for Kafka topic monitoring
entity_alias_filtering_fields = kafka_topic
entity_id_fields = kafka_topic
is_entity_breakdown = True
is_service_entity_filter = True
metrics = [\
    {\
        "_key": "Bytes_rejected_per_sec", \
        "aggregate_statop": "avg", \
        "entity_statop": "avg", \
        "fill_gaps": "null_value", \
        "gap_custom_alert_value": 0, \
        "gap_severity": "unknown", \
        "gap_severity_color": "#CCCCCC", \
        "gap_severity_color_light": "#EEEEEE", \
        "gap_severity_value": "-1", \
        "threshold_field": "BytesRejectedPerSec", \
        "title": "Bytes rejected per sec", \
        "unit": "byte"\
    }, \
    {\
        "_key": "Failed_produce_requests_per_sec", \
        "aggregate_statop": "avg", \
        "entity_statop": "avg", \
        "fill_gaps": "null_value", \
        "gap_custom_alert_value": 0, \
        "gap_severity": "unknown", \
        "gap_severity_color": "#CCCCCC", \
        "gap_severity_color_light": "#EEEEEE", \
        "gap_severity_value": "-1", \
        "threshold_field": "FailedProduceRequestsPerSec", \
        "title": "Failed produce requests per sec", \
        "unit": "#"\
    }, \
    {\
        "_key": "Failed_requests_per_sec", \
        "aggregate_statop": "avg", \
        "entity_statop": "avg", \
        "fill_gaps": "null_value", \
        "gap_custom_alert_value": 0, \
        "gap_severity": "unknown", \
        "gap_severity_color": "#CCCCCC", \
        "gap_severity_color_light": "#EEEEEE", \
        "gap_severity_value": "-1", \
        "threshold_field": "FailedFetchRequestsPerSec", \
        "title": "Failed requests per sec", \
        "unit": "#"\
    }, \
    {\
        "_key": "Messages_In_per_sec", \
        "aggregate_statop": "avg", \
        "entity_statop": "avg", \
        "fill_gaps": "null_value", \
        "gap_custom_alert_value": 0, \
        "gap_severity": "unknown", \
        "gap_severity_color": "#CCCCCC", \
        "gap_severity_color_light": "#EEEEEE", \
        "gap_severity_value": "-1", \
        "threshold_field": "MessagesInPerSec", \
        "title": "Messages In per sec", \
        "unit": "msg"\
    }, \
    {\
        "_key": "Total_fetch_requests_per_sec", \
        "aggregate_statop": "avg", \
        "entity_statop": "avg", \
        "fill_gaps": "null_value", \
        "gap_custom_alert_value": 0, \
        "gap_severity": "unknown", \
        "gap_severity_color": "#CCCCCC", \
        "gap_severity_color_light": "#EEEEEE", \
        "gap_severity_value": "-1", \
        "threshold_field": "TotalFetchRequestsPerSec", \
        "title": "Total fetch requests per sec", \
        "unit": "#"\
    }, \
    {\
        "_key": "Total_produce_requests_per_sec", \
        "aggregate_statop": "avg", \
        "entity_statop": "avg", \
        "fill_gaps": "null_value", \
        "gap_custom_alert_value": 0, \
        "gap_severity": "unknown", \
        "gap_severity_color": "#CCCCCC", \
        "gap_severity_color_light": "#EEEEEE", \
        "gap_severity_value": "-1", \
        "threshold_field": "TotalProduceRequestsPerSec", \
        "title": "Total produce requests per sec", \
        "unit": "#"\
    }, \
    {\
        "_key": "Traffic_In_KB_sec", \
        "aggregate_statop": "avg", \
        "entity_statop": "avg", \
        "fill_gaps": "null_value", \
        "gap_custom_alert_value": 0, \
        "gap_severity": "unknown", \
        "gap_severity_color": "#CCCCCC", \
        "gap_severity_color_light": "#EEEEEE", \
        "gap_severity_value": "-1", \
        "threshold_field": "KbytesInPerSec", \
        "title": "Traffic In KB/sec", \
        "unit": "KB"\
    }, \
    {\
        "_key": "Traffic_Out_KB_sec", \
        "aggregate_statop": "avg", \
        "entity_statop": "avg", \
        "fill_gaps": "null_value", \
        "gap_custom_alert_value": 0, \
        "gap_severity": "unknown", \
        "gap_severity_color": "#CCCCCC", \
        "gap_severity_color_light": "#EEEEEE", \
        "gap_severity_value": "-1", \
        "threshold_field": "KbytesOutPerSec", \
        "title": "Traffic Out KB/sec", \
        "unit": "KB"\
    }\
]
search_alert_earliest = 1
source_itsi_da = DA-ITSI-TELEGRAF-KAFKA
title = DA-ITSI-TELEGRAF-KAFKA:kafka-topics

[DA-ITSI-TELEGRAF-KAFKA-kafka-topics.partitions]
alert_lag = 30
alert_period = 1
base_search = | mstats latest(_value) as value where `telegraf_kafka_index` metric_name=kafka_partition.Size OR metric_name=kafka_partition.UnderReplicatedPartitions topic!="__*" by env, label, jolokia_agent_url, topic, partition, metric_name span=1m\
| eval {metric_name}=value\
| stats first(kafka_partition.*) as "topic.*" by _time, env, label, jolokia_agent_url, topic, partition\
| stats sum(topic.UnderReplicatedPartitions) as "topic.UnderReplicatedPartitions", sum(topic.Size) as "topic.Size" by _time, env, label, topic\
| eval topic.MBSize=round('topic.Size'/1024/1024, 2)\
| eval kafka_topic = env . ":" . label . ":" . topic\
| fields _time, env, label, kafka_topic, topic.UnderReplicatedPartitions, topic.MBSize
entity_alias_filtering_fields = kafka_topic
entity_id_fields = kafka_topic
is_entity_breakdown = True
is_service_entity_filter = True
metrics = [\
    {\
        "_key": "Number_of_Under-replicated_partitions", \
        "aggregate_statop": "sum", \
        "entity_statop": "latest", \
        "fill_gaps": "null_value", \
        "gap_custom_alert_value": 0, \
        "gap_severity": "unknown", \
        "gap_severity_color": "#CCCCCC", \
        "gap_severity_color_light": "#EEEEEE", \
        "gap_severity_value": "-1", \
        "threshold_field": "topic.UnderReplicatedPartitions", \
        "title": "Number of Under-replicated partitions", \
        "unit": "#"\
    }, \
    {\
        "_key": "Total_topic_size_-_MB", \
        "aggregate_statop": "sum", \
        "entity_statop": "latest", \
        "fill_gaps": "null_value", \
        "gap_custom_alert_value": 0, \
        "gap_severity": "unknown", \
        "gap_severity_color": "#CCCCCC", \
        "gap_severity_color_light": "#EEEEEE", \
        "gap_severity_value": "-1", \
        "threshold_field": "topic.MBSize", \
        "title": "Total topic size - MB", \
        "unit": "MB"\
    }\
]
search_alert_earliest = 1
source_itsi_da = DA-ITSI-TELEGRAF-KAFKA
title = DA-ITSI-TELEGRAF-KAFKA:kafka-topics.partitions

[DA-ITSI-TELEGRAF-KAFKA-kafka-zookeeper]
alert_lag = 30
alert_period = 1
base_search = | mstats latest(_value) as value where `telegraf_kafka_index` metric_name="zookeeper.avg_latency" OR metric_name="zookeeper.outstanding_requests" OR metric_name="zookeeper.pending_syncs" OR metric_name="zookeeper.max_file_descriptor_count" OR metric_name="zookeeper.open_file_descriptor_count" span=1s by metric_name, env, label, server\
| eval {metric_name}=value\
| fields _time, env, label, server, zookeeper.avg_latency, zookeeper.max_file_descriptor_count, zookeeper.open_file_descriptor_count, zookeeper.outstanding_requests, zookeeper.pending_syncs\
| stats latest(zookeeper.*) as "*" by _time, env, label, server\
| eval percent_file_descriptor_used=round((open_file_descriptor_count/max_file_descriptor_count)*100, 3)\
| eval server = env . ":" . label . ":" . server\
| fields _time, env, label, server, avg_latency, outstanding_requests, pending_syncs, percent_file_descriptor_used
description = Main KPIs for Zookeeper monitoring
entity_alias_filtering_fields = server
entity_id_fields = server
is_entity_breakdown = True
is_service_entity_filter = True
metrics = [\
    {\
        "_key": "avg_latency", \
        "aggregate_statop": "avg", \
        "entity_statop": "avg", \
        "fill_gaps": "null_value", \
        "gap_custom_alert_value": 0, \
        "gap_severity": "unknown", \
        "gap_severity_color": "#CCCCCC", \
        "gap_severity_color_light": "#EEEEEE", \
        "gap_severity_value": "-1", \
        "threshold_field": "avg_latency", \
        "title": "avg_latency", \
        "unit": "ms"\
    }, \
    {\
        "_key": "outstanding_requests", \
        "aggregate_statop": "sum", \
        "entity_statop": "sum", \
        "fill_gaps": "null_value", \
        "gap_custom_alert_value": 0, \
        "gap_severity": "unknown", \
        "gap_severity_color": "#CCCCCC", \
        "gap_severity_color_light": "#EEEEEE", \
        "gap_severity_value": "-1", \
        "threshold_field": "outstanding_requests", \
        "title": "outstanding_requests", \
        "unit": "#"\
    }, \
    {\
        "_key": "pending_syncs", \
        "aggregate_statop": "sum", \
        "entity_statop": "sum", \
        "fill_gaps": "null_value", \
        "gap_custom_alert_value": 0, \
        "gap_severity": "unknown", \
        "gap_severity_color": "#CCCCCC", \
        "gap_severity_color_light": "#EEEEEE", \
        "gap_severity_value": "-1", \
        "threshold_field": "pending_syncs", \
        "title": "pending_syncs", \
        "unit": "#"\
    }, \
    {\
        "_key": "percent_file_descriptor_used", \
        "aggregate_statop": "avg", \
        "entity_statop": "avg", \
        "fill_gaps": "null_value", \
        "gap_custom_alert_value": 0, \
        "gap_severity": "unknown", \
        "gap_severity_color": "#CCCCCC", \
        "gap_severity_color_light": "#EEEEEE", \
        "gap_severity_value": "-1", \
        "threshold_field": "percent_file_descriptor_used", \
        "title": "percent_file_descriptor_used", \
        "unit": "%"\
    }\
]
search_alert_earliest = 1
source_itsi_da = DA-ITSI-TELEGRAF-KAFKA
title = DA-ITSI-TELEGRAF-KAFKA:kafka-zookeeper

[DA-ITSI-TELEGRAF-KAFKA-kafka-zookeeper.traffic]
alert_lag = 30
alert_period = 1
base_search = | mstats latest(_value) as value where  `telegraf_kafka_index` metric_name="zookeeper.packets_sent" OR metric_name="zookeeper.packets_received" span=1s by metric_name, env, label, server\
| eval {metric_name}=value \
| stats first(zookeeper.*) as "*_counter" by _time, env, label, server\
| streamstats current=f last(*_counter) as "*_prev" by env, label, server\
| eval packets_sent=(packets_sent_counter-packets_sent_prev), packets_received=(packets_received_counter-packets_received_prev)\
| fields _time, env, label, server, packets_sent, packets_received\
| eval server = env . ":" . label . ":" . server\
| where packets_sent>=0 AND packets_received>=0
description = Traffic metrics for Zookeeper
entity_alias_filtering_fields = server
entity_id_fields = server
is_entity_breakdown = True
is_service_entity_filter = True
metrics = [\
    {\
        "_key": "packets_received", \
        "aggregate_statop": "sum", \
        "entity_statop": "sum", \
        "fill_gaps": "null_value", \
        "gap_custom_alert_value": 0, \
        "gap_severity": "unknown", \
        "gap_severity_color": "#CCCCCC", \
        "gap_severity_color_light": "#EEEEEE", \
        "gap_severity_value": "-1", \
        "threshold_field": "packets_received", \
        "title": "packets_received", \
        "unit": "#"\
    }, \
    {\
        "_key": "packets_sent", \
        "aggregate_statop": "sum", \
        "entity_statop": "sum", \
        "fill_gaps": "null_value", \
        "gap_custom_alert_value": 0, \
        "gap_severity": "unknown", \
        "gap_severity_color": "#CCCCCC", \
        "gap_severity_color_light": "#EEEEEE", \
        "gap_severity_value": "-1", \
        "threshold_field": "packets_sent", \
        "title": "packets_sent", \
        "unit": "#"\
    }\
]
search_alert_earliest = 1
source_itsi_da = DA-ITSI-TELEGRAF-KAFKA
title = DA-ITSI-TELEGRAF-KAFKA:kafka-zookeeper.traffic

[DA-ITSI-TELEGRAF-KAFKA-kafka-brokers]
alert_lag = 30
alert_period = 1
base_search = | mstats latest(_value) as value where `telegraf_kafka_index` `telegraf_kafka_monitoring_kpi_constraints` by metric_name, env, label, jolokia_agent_url span=1s\
| eval {metric_name}=value\
| stats first(kafka_controller.ActiveControllerCount.Value) as ActiveController,\
first(kafka_topics.MessagesInPerSec.OneMinuteRate) as MessagesInPerSec,\
first(kafka_topics.BytesInPerSec.OneMinuteRate) as KBytesInPerSec,\
first(kafka_topics.BytesOutPerSec.OneMinuteRate) as KBytesOutPerSec, \
first(kafka_replica_manager.IsrShrinksPerSec.OneMinuteRate) as IsrShrinksPerSec, \
first(kafka_replica_manager.LeaderCount.Value) as LeaderCount, \
first(kafka_replica_manager.PartitionCount.Value) as PartitionCount,\
first(kafka_topic.TotalProduceRequestsPerSec.OneMinuteRate) as TotalProduceRequestsPerSec,\
first(kafka_topic.TotalFetchRequestsPerSec.OneMinuteRate) as TotalFetchRequestsPerSec,\
first(kafka_topic.FailedProduceRequestsPerSec.OneMinuteRate) as FailedProduceRequestsPerSec,\
first(kafka_topic.FailedFetchRequestsPerSec.OneMinuteRate) as FailedFetchRequestsPerSec,\
first(kafka_jvm_garbage_collector.LastGcInfo.duration) as LastGcInfo_duration,\
first(kafka_controller.OfflinePartitionsCount.Value) as OfflinePartitionsCount,\
first(kafka_replica_manager.UnderReplicatedPartitions.Value) as UnderReplicatedPartitions by _time, env, label, jolokia_agent_url\
| eval KBytesInPerSec=(KBytesInPerSec/1024), KBytesOutPerSec=(KBytesOutPerSec/1024), ratio_ParitionLeader=round((LeaderCount/PartitionCount)*100,2)\
| rex field=jolokia_agent_url "//(?<kafka_broker>[^:]*)\:"\
| eval kafka_broker = env . ":" . label . ":" . kafka_broker\
| fields _time, env, label, kafka_broker, ActiveController, MessagesInPerSec, KBytesInPerSec, KBytesOutPerSec, IsrShrinksPerSec, ratio_ParitionLeader, TotalProduceRequestsPerSec, TotalFetchRequestsPerSec, FailedProduceRequestsPerSec, FailedFetchRequestsPerSec, LastGcInfo_duration, OfflinePartitionsCount, UnderReplicatedPartitions
description = Monitoring of Kafka brokers cluster
entity_alias_filtering_fields = kafka_broker
entity_id_fields = kafka_broker
is_entity_breakdown = True
is_service_entity_filter = True
metrics = [\
    {\
        "_key": "Active_Controller_state", \
        "aggregate_statop": "sum", \
        "entity_statop": "latest", \
        "fill_gaps": "null_value", \
        "gap_custom_alert_value": 1, \
        "gap_severity": "high", \
        "gap_severity_color": "#F26A35", \
        "gap_severity_color_light": "#FBCBB9", \
        "gap_severity_value": 5, \
        "threshold_field": "ActiveController", \
        "title": "Active Controller state", \
        "unit": "#"\
    }, \
    {\
        "_key": "All_topics_bytes_in_transformed_in_KBytes_", \
        "aggregate_statop": "sum", \
        "entity_statop": "avg", \
        "fill_gaps": "null_value", \
        "gap_custom_alert_value": 0, \
        "gap_severity": "unknown", \
        "gap_severity_color": "#CCCCCC", \
        "gap_severity_color_light": "#EEEEEE", \
        "gap_severity_value": "-1", \
        "threshold_field": "KBytesInPerSec", \
        "title": "All topics bytes in (transformed in KBytes)", \
        "unit": "KB"\
    }, \
    {\
        "_key": "All_topics_bytes_out_transformed_in_KBytes_", \
        "aggregate_statop": "sum", \
        "entity_statop": "avg", \
        "fill_gaps": "null_value", \
        "gap_custom_alert_value": 0, \
        "gap_severity": "unknown", \
        "gap_severity_color": "#CCCCCC", \
        "gap_severity_color_light": "#EEEEEE", \
        "gap_severity_value": "-1", \
        "threshold_field": "KBytesOutPerSec", \
        "title": "All topics bytes out (transformed in KBytes)", \
        "unit": "KB"\
    }, \
    {\
        "_key": "All_topics_Failed_Fetch_per_sec", \
        "aggregate_statop": "sum", \
        "entity_statop": "avg", \
        "fill_gaps": "null_value", \
        "gap_custom_alert_value": 0, \
        "gap_severity": "unknown", \
        "gap_severity_color": "#CCCCCC", \
        "gap_severity_color_light": "#EEEEEE", \
        "gap_severity_value": "-1", \
        "threshold_field": "FailedFetchRequestsPerSec", \
        "title": "All topics Failed Fetch per sec", \
        "unit": "#"\
    }, \
    {\
        "_key": "All_topics_failed_Produce_per_sec", \
        "aggregate_statop": "sum", \
        "entity_statop": "avg", \
        "fill_gaps": "null_value", \
        "gap_custom_alert_value": 0, \
        "gap_severity": "unknown", \
        "gap_severity_color": "#CCCCCC", \
        "gap_severity_color_light": "#EEEEEE", \
        "gap_severity_value": "-1", \
        "threshold_field": "FailedProduceRequestsPerSec", \
        "title": "All topics failed Produce per sec", \
        "unit": "#"\
    }, \
    {\
        "_key": "All_topics_Fetch_per_sec", \
        "aggregate_statop": "sum", \
        "entity_statop": "avg", \
        "fill_gaps": "null_value", \
        "gap_custom_alert_value": 0, \
        "gap_severity": "unknown", \
        "gap_severity_color": "#CCCCCC", \
        "gap_severity_color_light": "#EEEEEE", \
        "gap_severity_value": "-1", \
        "threshold_field": "TotalFetchRequestsPerSec", \
        "title": "All topics Fetch per sec", \
        "unit": "#"\
    }, \
    {\
        "_key": "All_topics_Messages_per_sec", \
        "aggregate_statop": "sum", \
        "entity_statop": "avg", \
        "fill_gaps": "null_value", \
        "gap_custom_alert_value": 0, \
        "gap_severity": "unknown", \
        "gap_severity_color": "#CCCCCC", \
        "gap_severity_color_light": "#EEEEEE", \
        "gap_severity_value": "-1", \
        "threshold_field": "MessagesInPerSec", \
        "title": "All topics Messages per sec", \
        "unit": "#"\
    }, \
    {\
        "_key": "All_topics_Produce_requests_per_sec", \
        "aggregate_statop": "sum", \
        "entity_statop": "avg", \
        "fill_gaps": "null_value", \
        "gap_custom_alert_value": 0, \
        "gap_severity": "unknown", \
        "gap_severity_color": "#CCCCCC", \
        "gap_severity_color_light": "#EEEEEE", \
        "gap_severity_value": "-1", \
        "threshold_field": "TotalProduceRequestsPerSec", \
        "title": "All topics Produce requests per sec", \
        "unit": "#"\
    }, \
    {\
        "_key": "ISR_shrinking_rate", \
        "aggregate_statop": "sum", \
        "entity_statop": "avg", \
        "fill_gaps": "null_value", \
        "gap_custom_alert_value": 0, \
        "gap_severity": "unknown", \
        "gap_severity_color": "#CCCCCC", \
        "gap_severity_color_light": "#EEEEEE", \
        "gap_severity_value": "-1", \
        "threshold_field": "IsrShrinksPerSec", \
        "title": "ISR shrinking rate", \
        "unit": "#"\
    }, \
    {\
        "_key": "JVM_Garbage_collection_duration", \
        "aggregate_statop": "avg", \
        "entity_statop": "avg", \
        "fill_gaps": "null_value", \
        "gap_custom_alert_value": 0, \
        "gap_severity": "unknown", \
        "gap_severity_color": "#CCCCCC", \
        "gap_severity_color_light": "#EEEEEE", \
        "gap_severity_value": "-1", \
        "threshold_field": "LastGcInfo_duration", \
        "title": "JVM Garbage collection duration", \
        "unit": "ms"\
    }, \
    {\
        "_key": "Offline_partitions", \
        "aggregate_statop": "sum", \
        "entity_statop": "latest", \
        "fill_gaps": "null_value", \
        "gap_custom_alert_value": 0, \
        "gap_severity": "unknown", \
        "gap_severity_color": "#CCCCCC", \
        "gap_severity_color_light": "#EEEEEE", \
        "gap_severity_value": "-1", \
        "threshold_field": "OfflinePartitionsCount", \
        "title": "Offline partitions", \
        "unit": "#"\
    }, \
    {\
        "_key": "Ratio_partitions_leader", \
        "aggregate_statop": "avg", \
        "entity_statop": "avg", \
        "fill_gaps": "null_value", \
        "gap_custom_alert_value": 0, \
        "gap_severity": "unknown", \
        "gap_severity_color": "#CCCCCC", \
        "gap_severity_color_light": "#EEEEEE", \
        "gap_severity_value": "-1", \
        "threshold_field": "ratio_ParitionLeader", \
        "title": "Ratio partitions leader", \
        "unit": "%"\
    }, \
    {\
        "_key": "Under-replicated_partitions", \
        "aggregate_statop": "sum", \
        "entity_statop": "latest", \
        "fill_gaps": "null_value", \
        "gap_custom_alert_value": 0, \
        "gap_severity": "unknown", \
        "gap_severity_color": "#CCCCCC", \
        "gap_severity_color_light": "#EEEEEE", \
        "gap_severity_value": "-1", \
        "threshold_field": "UnderReplicatedPartitions", \
        "title": "Under-replicated partitions", \
        "unit": "#"\
    }\
]
search_alert_earliest = 1
source_itsi_da = DA-ITSI-TELEGRAF-KAFKA
title = DA-ITSI-TELEGRAF-KAFKA:kafka-brokers

[DA-ITSI-TELEGRAF-KAFKA-kafka-connect]
alert_lag = 30
alert_period = 1
base_search = | mstats latest(_value) as value WHERE `telegraf_kafka_index` metric_name="kafka_connect.worker.task-startup-failure-total" OR metric_name="kafka_connect.worker.connector-startup-failure-total" OR metric_name="kafka_connect.worker.task-count" OR metric_name="kafka_connect.worker.rebalancing" by metric_name, env, label, jolokia_agent_url span=1s\
| eval {metric_name}=value\
| stats first(kafka_connect.*) as "*" by _time, env, label, jolokia_agent_url\
| rex field=jolokia_agent_url "//(?<kafka_connect>[^:]*)\:"\
| eval kafka_connect = env . ":" . label . ":" . kafka_connect\
| fields _time, env, label, kafka_connect, worker.connector-startup-failure-total, worker.rebalancing, worker.task-count, worker.task-startup-failure-total
description = This KPI basesearch provides insight monitoring for Kafka Connect
entity_alias_filtering_fields = kafka_connect
entity_id_fields = kafka_connect
is_entity_breakdown = True
is_service_entity_filter = True
metrics = [\
    {\
        "_key": "worker.connector-startup-failure-total", \
        "aggregate_statop": "sum", \
        "entity_statop": "sum", \
        "fill_gaps": "null_value", \
        "gap_custom_alert_value": 0, \
        "gap_severity": "unknown", \
        "gap_severity_color": "#CCCCCC", \
        "gap_severity_color_light": "#EEEEEE", \
        "gap_severity_value": "-1", \
        "threshold_field": "worker.connector-startup-failure-total", \
        "title": "worker.connector-startup-failure-total", \
        "unit": "#"\
    }, \
    {\
        "_key": "worker.rebalancing", \
        "aggregate_statop": "sum", \
        "entity_statop": "sum", \
        "fill_gaps": "null_value", \
        "gap_custom_alert_value": 0, \
        "gap_severity": "unknown", \
        "gap_severity_color": "#CCCCCC", \
        "gap_severity_color_light": "#EEEEEE", \
        "gap_severity_value": "-1", \
        "threshold_field": "worker.rebalancing", \
        "title": "worker.rebalancing", \
        "unit": "#"\
    }, \
    {\
        "_key": "worker.task-count", \
        "aggregate_statop": "sum", \
        "entity_statop": "latest", \
        "fill_gaps": "null_value", \
        "gap_custom_alert_value": 0, \
        "gap_severity": "unknown", \
        "gap_severity_color": "#CCCCCC", \
        "gap_severity_color_light": "#EEEEEE", \
        "gap_severity_value": "-1", \
        "threshold_field": "worker.task-count", \
        "title": "worker.task-count", \
        "unit": "#"\
    }, \
    {\
        "_key": "worker.task-startup-failure-total", \
        "aggregate_statop": "sum", \
        "entity_statop": "sum", \
        "fill_gaps": "null_value", \
        "gap_custom_alert_value": 0, \
        "gap_severity": "unknown", \
        "gap_severity_color": "#CCCCCC", \
        "gap_severity_color_light": "#EEEEEE", \
        "gap_severity_value": "-1", \
        "threshold_field": "worker.task-startup-failure-total", \
        "title": "worker.task-startup-failure-total", \
        "unit": "#"\
    }\
]
search_alert_earliest = 1
source_itsi_da = DA-ITSI-TELEGRAF-KAFKA
title = DA-ITSI-TELEGRAF-KAFKA:kafka-connect

[DA-ITSI-TELEGRAF-KAFKA-kafka-connect.connectors]
alert_lag = 30
alert_period = 1
base_search = | mstats latest(_value) as value where `telegraf_kafka_index` `telegraf_kafka_tasks_monitoring_kpi_constraints` jolokia_agent_url=* connector=* by metric_name, env, label, connector span=1s\
| eval {metric_name}=value\
| stats first(kafka_connect.*) as "*" by _time, env, label, connector\
| eval kafka_task = env . ":" . label . ":" . connector\
| fields _time, env, label, kafka_task, connector-task.batch-size-avg, connector-task.offset-commit-avg-time-ms, connector-task.running-ratio, connector-task.status, error-task.deadletterqueue-produce-failures, error-task.deadletterqueue-produce-requests, error-task.total-errors-logged, error-task.total-record-errors, error-task.total-record-failures, error-task.total-records-skipped, error-task.total-retries, sink-task.offset-commit-completion-rate, sink-task.offset-commit-skip-rate, sink-task.partition-count, sink-task.put-batch-avg-time-ms, sink-task.sink-record-read-rate, sink-task.sink-record-send-rate, source-task.poll-batch-avg-time-ms, source-task.source-record-active-count-avg, source-task.source-record-poll-rate, source-task.source-record-write-rate
description = This KPI basesearch provides insight monitoring for Kafka Connect source and sink connectors
entity_alias_filtering_fields = kafka_task
entity_id_fields = kafka_task
is_entity_breakdown = True
is_service_entity_filter = True
metrics = [\
    {\
        "_key": "connector-task.batch-size-avg", \
        "aggregate_statop": "avg", \
        "entity_statop": "avg", \
        "fill_gaps": "null_value", \
        "gap_custom_alert_value": 0, \
        "gap_severity": "unknown", \
        "gap_severity_color": "#CCCCCC", \
        "gap_severity_color_light": "#EEEEEE", \
        "gap_severity_value": "-1", \
        "threshold_field": "connector-task.batch-size-avg", \
        "title": "connector-task.batch-size-avg", \
        "unit": "byte"\
    }, \
    {\
        "_key": "connector-task.offset-commit-avg-time-ms", \
        "aggregate_statop": "avg", \
        "entity_statop": "avg", \
        "fill_gaps": "null_value", \
        "gap_custom_alert_value": 0, \
        "gap_severity": "unknown", \
        "gap_severity_color": "#CCCCCC", \
        "gap_severity_color_light": "#EEEEEE", \
        "gap_severity_value": "-1", \
        "threshold_field": "connector-task.offset-commit-avg-time-ms", \
        "title": "connector-task.offset-commit-avg-time-ms", \
        "unit": "ms"\
    }, \
    {\
        "_key": "connector-task.running-ratio", \
        "aggregate_statop": "avg", \
        "entity_statop": "avg", \
        "fill_gaps": "null_value", \
        "gap_custom_alert_value": 0, \
        "gap_severity": "unknown", \
        "gap_severity_color": "#CCCCCC", \
        "gap_severity_color_light": "#EEEEEE", \
        "gap_severity_value": "-1", \
        "threshold_field": "connector-task.running-ratio", \
        "title": "connector-task.running-ratio", \
        "unit": "%"\
    }, \
    {\
        "_key": "connector-task.status", \
        "aggregate_statop": "min", \
        "entity_statop": "latest", \
        "fill_gaps": "null_value", \
        "gap_custom_alert_value": 1, \
        "gap_severity": "high", \
        "gap_severity_color": "#F26A35", \
        "gap_severity_color_light": "#FBCBB9", \
        "gap_severity_value": 5, \
        "threshold_field": "connector-task.status", \
        "title": "connector-task.status", \
        "unit": "#"\
    }, \
    {\
        "_key": "error-task.deadletterqueue-produce-failures", \
        "aggregate_statop": "sum", \
        "entity_statop": "avg", \
        "fill_gaps": "null_value", \
        "gap_custom_alert_value": 0, \
        "gap_severity": "unknown", \
        "gap_severity_color": "#CCCCCC", \
        "gap_severity_color_light": "#EEEEEE", \
        "gap_severity_value": "-1", \
        "threshold_field": "error-task.deadletterqueue-produce-failures", \
        "title": "error-task.deadletterqueue-produce-failures", \
        "unit": "#"\
    }, \
    {\
        "_key": "error-task.deadletterqueue-produce-requests", \
        "aggregate_statop": "sum", \
        "entity_statop": "avg", \
        "fill_gaps": "null_value", \
        "gap_custom_alert_value": 0, \
        "gap_severity": "unknown", \
        "gap_severity_color": "#CCCCCC", \
        "gap_severity_color_light": "#EEEEEE", \
        "gap_severity_value": "-1", \
        "threshold_field": "error-task.deadletterqueue-produce-requests", \
        "title": "error-task.deadletterqueue-produce-requests", \
        "unit": "#"\
    }, \
    {\
        "_key": "error-task.total-errors-logged", \
        "aggregate_statop": "sum", \
        "entity_statop": "avg", \
        "fill_gaps": "null_value", \
        "gap_custom_alert_value": 0, \
        "gap_severity": "unknown", \
        "gap_severity_color": "#CCCCCC", \
        "gap_severity_color_light": "#EEEEEE", \
        "gap_severity_value": "-1", \
        "threshold_field": "error-task.total-errors-logged", \
        "title": "error-task.total-errors-logged", \
        "unit": "#"\
    }, \
    {\
        "_key": "error-task.total-record-errors", \
        "aggregate_statop": "sum", \
        "entity_statop": "avg", \
        "fill_gaps": "null_value", \
        "gap_custom_alert_value": 0, \
        "gap_severity": "unknown", \
        "gap_severity_color": "#CCCCCC", \
        "gap_severity_color_light": "#EEEEEE", \
        "gap_severity_value": "-1", \
        "threshold_field": "error-task.total-record-errors", \
        "title": "error-task.total-record-errors", \
        "unit": "#"\
    }, \
    {\
        "_key": "error-task.total-record-failures", \
        "aggregate_statop": "sum", \
        "entity_statop": "avg", \
        "fill_gaps": "null_value", \
        "gap_custom_alert_value": 0, \
        "gap_severity": "unknown", \
        "gap_severity_color": "#CCCCCC", \
        "gap_severity_color_light": "#EEEEEE", \
        "gap_severity_value": "-1", \
        "threshold_field": "error-task.total-record-failures", \
        "title": "error-task.total-record-failures", \
        "unit": "#"\
    }, \
    {\
        "_key": "error-task.total-records-skipped", \
        "aggregate_statop": "sum", \
        "entity_statop": "avg", \
        "fill_gaps": "null_value", \
        "gap_custom_alert_value": 0, \
        "gap_severity": "unknown", \
        "gap_severity_color": "#CCCCCC", \
        "gap_severity_color_light": "#EEEEEE", \
        "gap_severity_value": "-1", \
        "threshold_field": "error-task.total-records-skipped", \
        "title": "error-task.total-records-skipped", \
        "unit": "#"\
    }, \
    {\
        "_key": "error-task.total-retries", \
        "aggregate_statop": "sum", \
        "entity_statop": "avg", \
        "fill_gaps": "null_value", \
        "gap_custom_alert_value": 0, \
        "gap_severity": "unknown", \
        "gap_severity_color": "#CCCCCC", \
        "gap_severity_color_light": "#EEEEEE", \
        "gap_severity_value": "-1", \
        "threshold_field": "error-task.total-retries", \
        "title": "error-task.total-retries", \
        "unit": "#"\
    }, \
    {\
        "_key": "sink-task.offset-commit-completion-rate", \
        "aggregate_statop": "avg", \
        "entity_statop": "avg", \
        "fill_gaps": "null_value", \
        "gap_custom_alert_value": 0, \
        "gap_severity": "unknown", \
        "gap_severity_color": "#CCCCCC", \
        "gap_severity_color_light": "#EEEEEE", \
        "gap_severity_value": "-1", \
        "threshold_field": "sink-task.offset-commit-completion-rate", \
        "title": "sink-task.offset-commit-completion-rate", \
        "unit": "rate"\
    }, \
    {\
        "_key": "sink-task.offset-commit-skip-rate", \
        "aggregate_statop": "avg", \
        "entity_statop": "avg", \
        "fill_gaps": "null_value", \
        "gap_custom_alert_value": 0, \
        "gap_severity": "unknown", \
        "gap_severity_color": "#CCCCCC", \
        "gap_severity_color_light": "#EEEEEE", \
        "gap_severity_value": "-1", \
        "threshold_field": "sink-task.offset-commit-skip-rate", \
        "title": "sink-task.offset-commit-skip-rate", \
        "unit": "rate"\
    }, \
    {\
        "_key": "sink-task.partition-count", \
        "aggregate_statop": "sum", \
        "entity_statop": "latest", \
        "fill_gaps": "null_value", \
        "gap_custom_alert_value": 0, \
        "gap_severity": "unknown", \
        "gap_severity_color": "#CCCCCC", \
        "gap_severity_color_light": "#EEEEEE", \
        "gap_severity_value": "-1", \
        "threshold_field": "sink-task.partition-count", \
        "title": "sink-task.partition-count", \
        "unit": "#"\
    }, \
    {\
        "_key": "sink-task.put-batch-avg-time-ms", \
        "aggregate_statop": "avg", \
        "entity_statop": "avg", \
        "fill_gaps": "null_value", \
        "gap_custom_alert_value": 0, \
        "gap_severity": "unknown", \
        "gap_severity_color": "#CCCCCC", \
        "gap_severity_color_light": "#EEEEEE", \
        "gap_severity_value": "-1", \
        "threshold_field": "sink-task.put-batch-avg-time-ms", \
        "title": "sink-task.put-batch-avg-time-ms", \
        "unit": "ms"\
    }, \
    {\
        "_key": "sink-task.sink-record-read-rate", \
        "aggregate_statop": "avg", \
        "entity_statop": "avg", \
        "fill_gaps": "null_value", \
        "gap_custom_alert_value": 0, \
        "gap_severity": "unknown", \
        "gap_severity_color": "#CCCCCC", \
        "gap_severity_color_light": "#EEEEEE", \
        "gap_severity_value": "-1", \
        "threshold_field": "sink-task.sink-record-read-rate", \
        "title": "sink-task.sink-record-read-rate", \
        "unit": "rate"\
    }, \
    {\
        "_key": "sink-task.sink-record-send-rate", \
        "aggregate_statop": "avg", \
        "entity_statop": "avg", \
        "fill_gaps": "null_value", \
        "gap_custom_alert_value": 0, \
        "gap_severity": "unknown", \
        "gap_severity_color": "#CCCCCC", \
        "gap_severity_color_light": "#EEEEEE", \
        "gap_severity_value": "-1", \
        "threshold_field": "sink-task.sink-record-send-rate", \
        "title": "sink-task.sink-record-send-rate", \
        "unit": "rate"\
    }, \
    {\
        "_key": "source-task.poll-batch-avg-time-ms", \
        "aggregate_statop": "avg", \
        "entity_statop": "avg", \
        "fill_gaps": "null_value", \
        "gap_custom_alert_value": 0, \
        "gap_severity": "unknown", \
        "gap_severity_color": "#CCCCCC", \
        "gap_severity_color_light": "#EEEEEE", \
        "gap_severity_value": "-1", \
        "threshold_field": "source-task.poll-batch-avg-time-ms", \
        "title": "source-task.poll-batch-avg-time-ms", \
        "unit": "ms"\
    }, \
    {\
        "_key": "source-task.source-record-active-count-avg", \
        "aggregate_statop": "avg", \
        "entity_statop": "avg", \
        "fill_gaps": "null_value", \
        "gap_custom_alert_value": 0, \
        "gap_severity": "unknown", \
        "gap_severity_color": "#CCCCCC", \
        "gap_severity_color_light": "#EEEEEE", \
        "gap_severity_value": "-1", \
        "threshold_field": "source-task.source-record-active-count-avg", \
        "title": "source-task.source-record-active-count-avg", \
        "unit": "rate"\
    }, \
    {\
        "_key": "source-task.source-record-poll-rate", \
        "aggregate_statop": "avg", \
        "entity_statop": "avg", \
        "fill_gaps": "null_value", \
        "gap_custom_alert_value": 0, \
        "gap_severity": "unknown", \
        "gap_severity_color": "#CCCCCC", \
        "gap_severity_color_light": "#EEEEEE", \
        "gap_severity_value": "-1", \
        "threshold_field": "source-task.source-record-poll-rate", \
        "title": "source-task.source-record-poll-rate", \
        "unit": "rate"\
    }, \
    {\
        "_key": "source-task.source-record-write-rate", \
        "aggregate_statop": "avg", \
        "entity_statop": "avg", \
        "fill_gaps": "null_value", \
        "gap_custom_alert_value": 0, \
        "gap_severity": "unknown", \
        "gap_severity_color": "#CCCCCC", \
        "gap_severity_color_light": "#EEEEEE", \
        "gap_severity_value": "-1", \
        "threshold_field": "source-task.source-record-write-rate", \
        "title": "source-task.source-record-write-rate", \
        "unit": "rate"\
    }\
]
search_alert_earliest = 1
source_itsi_da = DA-ITSI-TELEGRAF-KAFKA
title = DA-ITSI-TELEGRAF-KAFKA:kafka-connect.connectors

[DA-ITSI-TELEGRAF-KAFKA-kafka-linkedin-monitor]
alert_lag = 30
alert_period = 1
base_search = | mstats latest(_value) as value where `telegraf_kafka_index` metric_name="kafka_kafka-monitor.bytes-consumed-rate" OR metric_name="kafka_kafka-monitor.consume-availability-avg" OR metric_name="kafka_kafka-monitor.produce-availability-avg" OR metric_name="kafka_kafka-monitor.produce-error-rate" OR metric_name="kafka_kafka-monitor.consume-error-rate" OR metric_name="kafka_kafka-monitor.records-lost-rate" OR metric_name="kafka_kafka-monitor.records-duplicated-rate" span=1s by metric_name, env, label, jolokia_agent_url\
| eval {metric_name}=value\
| stats first(kafka_kafka-monitor.*-rate) as "*", first(kafka_kafka-monitor.*-avg) as "*"  by _time, env, label, jolokia_agent_url\
| eval Kbytes-consumed=round('bytes-consumed'/1024, 2), consume-availability=round('consume-availability'*100, 2), produce-availability=round('produce-availability'*100, 2)\
| rex field=jolokia_agent_url "//(?<kafka_monitor>[^:]*)\:"\
| eval kafka_monitor = env . ":" . label . ":" . kafka_monitor\
| fields fields _time, env, label, kafka_monitor, consume-error, consume-availability, Kbytes-consumed, produce-availability, produce-error, records-duplicated, records-lost
description = The template service leverages the Kafka LinkedIn monitor to provide end to end monitoring for your Kafka deployment
entity_alias_filtering_fields = kafka_monitor
entity_id_fields = kafka_monitor
is_entity_breakdown = True
is_service_entity_filter = True
metrics = [\
    {\
        "_key": "Consume_error_rate", \
        "aggregate_statop": "avg", \
        "entity_statop": "avg", \
        "fill_gaps": "null_value", \
        "gap_custom_alert_value": 0, \
        "gap_severity": "unknown", \
        "gap_severity_color": "#CCCCCC", \
        "gap_severity_color_light": "#EEEEEE", \
        "gap_severity_value": "-1", \
        "threshold_field": "consume-error", \
        "title": "Consume error rate", \
        "unit": "rate"\
    }, \
    {\
        "_key": "Consumer_Availability_rate", \
        "aggregate_statop": "avg", \
        "entity_statop": "latest", \
        "fill_gaps": "null_value", \
        "gap_custom_alert_value": 0, \
        "gap_severity": "unknown", \
        "gap_severity_color": "#CCCCCC", \
        "gap_severity_color_light": "#EEEEEE", \
        "gap_severity_value": "-1", \
        "threshold_field": "consume-availability", \
        "title": "Consumer Availability rate", \
        "unit": "rate"\
    }, \
    {\
        "_key": "Kbytes-consumed", \
        "aggregate_statop": "avg", \
        "entity_statop": "avg", \
        "fill_gaps": "null_value", \
        "gap_custom_alert_value": 0, \
        "gap_severity": "unknown", \
        "gap_severity_color": "#CCCCCC", \
        "gap_severity_color_light": "#EEEEEE", \
        "gap_severity_value": "-1", \
        "threshold_field": "Kbytes-consumed", \
        "title": "Kbytes-consumed", \
        "unit": "KB"\
    }, \
    {\
        "_key": "Produce_Availability_rate", \
        "aggregate_statop": "avg", \
        "entity_statop": "latest", \
        "fill_gaps": "null_value", \
        "gap_custom_alert_value": 0, \
        "gap_severity": "unknown", \
        "gap_severity_color": "#CCCCCC", \
        "gap_severity_color_light": "#EEEEEE", \
        "gap_severity_value": "-1", \
        "threshold_field": "produce-availability", \
        "title": "Produce Availability rate", \
        "unit": "rate"\
    }, \
    {\
        "_key": "Produce_error_rate", \
        "aggregate_statop": "avg", \
        "entity_statop": "avg", \
        "fill_gaps": "null_value", \
        "gap_custom_alert_value": 0, \
        "gap_severity": "unknown", \
        "gap_severity_color": "#CCCCCC", \
        "gap_severity_color_light": "#EEEEEE", \
        "gap_severity_value": "-1", \
        "threshold_field": "produce-error", \
        "title": "Produce error rate", \
        "unit": "rate"\
    }, \
    {\
        "_key": "records-duplicated", \
        "aggregate_statop": "avg", \
        "entity_statop": "avg", \
        "fill_gaps": "null_value", \
        "gap_custom_alert_value": 0, \
        "gap_severity": "unknown", \
        "gap_severity_color": "#CCCCCC", \
        "gap_severity_color_light": "#EEEEEE", \
        "gap_severity_value": "-1", \
        "threshold_field": "records-duplicated", \
        "title": "records-duplicated", \
        "unit": "rate"\
    }, \
    {\
        "_key": "records-lost", \
        "aggregate_statop": "avg", \
        "entity_statop": "avg", \
        "fill_gaps": "null_value", \
        "gap_custom_alert_value": 0, \
        "gap_severity": "unknown", \
        "gap_severity_color": "#CCCCCC", \
        "gap_severity_color_light": "#EEEEEE", \
        "gap_severity_value": "-1", \
        "threshold_field": "records-lost", \
        "title": "records-lost", \
        "unit": "rate"\
    }\
]
search_alert_earliest = 1
source_itsi_da = DA-ITSI-TELEGRAF-KAFKA
title = DA-ITSI-TELEGRAF-KAFKA:kafka-linkedin-monitor

[DA-ITSI-TELEGRAF-KAFKA-confluent-kafka-rest]
alert_lag = 30
alert_period = 1
base_search = | mstats avg(_value) as value WHERE `telegraf_kafka_index` metric_name="kafka_kafka-rest.jetty-metrics.connections-active" OR  metric_name="kafka_kafka-rest.jetty-metrics.connections-opened-rate" OR metric_name="kafka_kafka-rest.jetty-metrics.connections-closed-rate" OR metric_name="kafka_kafka-rest.jersey-metrics.request-error-rate" by env, label, jolokia_agent_url, metric_name span=1s\
| eval {metric_name}=value\
| stats first(kafka_kafka-rest.jetty-metrics.*) as "*", first(kafka_kafka-rest.jersey-metrics.*) as "*" by _time, env, label, jolokia_agent_url\
| rex field=jolokia_agent_url "//(?<kafka_rest>[^:]*)\:"\
| eval kafka_rest = env . ":" . label . ":" . kafka_rest\
| fields _time, env, label, kafka_rest, connections-active, connections-closed-rate, connections-opened-rate, request-error-rate
description = This KPI basesearch provides monitoring for the Confluent kafka-rest component
entity_alias_filtering_fields = kafka_rest
entity_id_fields = kafka_rest
is_entity_breakdown = True
is_service_entity_filter = True
metrics = [\
    {\
        "_key": "connections-active", \
        "aggregate_statop": "avg", \
        "entity_statop": "avg", \
        "fill_gaps": "null_value", \
        "gap_custom_alert_value": 0, \
        "gap_severity": "unknown", \
        "gap_severity_color": "#CCCCCC", \
        "gap_severity_color_light": "#EEEEEE", \
        "gap_severity_value": "-1", \
        "threshold_field": "connections-active", \
        "title": "connections-active", \
        "unit": "#"\
    }, \
    {\
        "_key": "connections-closed-rate", \
        "aggregate_statop": "avg", \
        "entity_statop": "avg", \
        "fill_gaps": "null_value", \
        "gap_custom_alert_value": 0, \
        "gap_severity": "unknown", \
        "gap_severity_color": "#CCCCCC", \
        "gap_severity_color_light": "#EEEEEE", \
        "gap_severity_value": "-1", \
        "threshold_field": "connections-closed-rate", \
        "title": "connections-closed-rate", \
        "unit": "#"\
    }, \
    {\
        "_key": "connections-opened-rate", \
        "aggregate_statop": "avg", \
        "entity_statop": "avg", \
        "fill_gaps": "null_value", \
        "gap_custom_alert_value": 0, \
        "gap_severity": "unknown", \
        "gap_severity_color": "#CCCCCC", \
        "gap_severity_color_light": "#EEEEEE", \
        "gap_severity_value": "-1", \
        "threshold_field": "connections-opened-rate", \
        "title": "connections-opened-rate", \
        "unit": "#"\
    }, \
    {\
        "_key": "request-error-rate", \
        "aggregate_statop": "avg", \
        "entity_statop": "avg", \
        "fill_gaps": "null_value", \
        "gap_custom_alert_value": 0, \
        "gap_severity": "unknown", \
        "gap_severity_color": "#CCCCCC", \
        "gap_severity_color_light": "#EEEEEE", \
        "gap_severity_value": "-1", \
        "threshold_field": "request-error-rate", \
        "title": "request-error-rate", \
        "unit": "#"\
    }\
]
search_alert_earliest = 1
source_itsi_da = DA-ITSI-TELEGRAF-KAFKA
title = DA-ITSI-TELEGRAF-KAFKA:confluent-kafka-rest

[DA-ITSI-TELEGRAF-KAFKA-confluent-ksql-server]
alert_lag = 30
alert_period = 1
base_search = | mstats latest(_value) as value WHERE `telegraf_kafka_index` metric_name="kafka_ksql-server.num-persistent-queries" OR metric_name="kafka_ksql-server.num-active-queries" OR metric_name="kafka_ksql-server.num-idle-queries" OR metric_name=kafka_ksql-server.messages-consumed-per-sec OR metric_name=kafka_ksql-server.messages-produced-per-sec OR metric_name="kafka_ksql-server.error-rate" by metric_name, env, label, jolokia_agent_url span=1s\
| eval {metric_name}=value\
| stats first(kafka_ksql-server.*) as "*" by _time, env, label, jolokia_agent_url\
| rex field=jolokia_agent_url "//(?<kafka_ksql_server>[^:]*)\:"\
| eval kafka_ksql_server = env . ":" . label . ":" . kafka_ksql_server\
| fields _time, env, label, kafka_ksql_server, num-active-queries, error-rate, num-idle-queries, messages-consumed-per-sec, messages-produced-per-sec, num-persistent-queries
description = This KPI basesearch provides monitoring for the Confluent ksql-server component
entity_alias_filtering_fields = kafka_ksql_server
entity_id_fields = kafka_ksql_server
is_entity_breakdown = True
is_service_entity_filter = True
metrics = [\
    {\
        "_key": "Active_queries", \
        "aggregate_statop": "sum", \
        "entity_statop": "latest", \
        "fill_gaps": "null_value", \
        "gap_custom_alert_value": 0, \
        "gap_severity": "unknown", \
        "gap_severity_color": "#CCCCCC", \
        "gap_severity_color_light": "#EEEEEE", \
        "gap_severity_value": "-1", \
        "threshold_field": "num-active-queries", \
        "title": "Active queries", \
        "unit": "#"\
    }, \
    {\
        "_key": "Error_rate", \
        "aggregate_statop": "avg", \
        "entity_statop": "avg", \
        "fill_gaps": "null_value", \
        "gap_custom_alert_value": 0, \
        "gap_severity": "unknown", \
        "gap_severity_color": "#CCCCCC", \
        "gap_severity_color_light": "#EEEEEE", \
        "gap_severity_value": "-1", \
        "threshold_field": "error-rate", \
        "title": "Error rate", \
        "unit": "rate"\
    }, \
    {\
        "_key": "Idle_queries", \
        "aggregate_statop": "sum", \
        "entity_statop": "avg", \
        "fill_gaps": "null_value", \
        "gap_custom_alert_value": 0, \
        "gap_severity": "unknown", \
        "gap_severity_color": "#CCCCCC", \
        "gap_severity_color_light": "#EEEEEE", \
        "gap_severity_value": "-1", \
        "threshold_field": "num-idle-queries", \
        "title": "Idle queries", \
        "unit": "#"\
    }, \
    {\
        "_key": "Messages_consumed_per_sec", \
        "aggregate_statop": "avg", \
        "entity_statop": "avg", \
        "fill_gaps": "null_value", \
        "gap_custom_alert_value": 0, \
        "gap_severity": "unknown", \
        "gap_severity_color": "#CCCCCC", \
        "gap_severity_color_light": "#EEEEEE", \
        "gap_severity_value": "-1", \
        "threshold_field": "messages-consumed-per-sec", \
        "title": "Messages consumed per sec", \
        "unit": "msg"\
    }, \
    {\
        "_key": "Messages_produced_per_sec", \
        "aggregate_statop": "avg", \
        "entity_statop": "avg", \
        "fill_gaps": "null_value", \
        "gap_custom_alert_value": 0, \
        "gap_severity": "unknown", \
        "gap_severity_color": "#CCCCCC", \
        "gap_severity_color_light": "#EEEEEE", \
        "gap_severity_value": "-1", \
        "threshold_field": "messages-produced-per-sec", \
        "title": "Messages produced per sec", \
        "unit": "msg"\
    }, \
    {\
        "_key": "Persistent_queries", \
        "aggregate_statop": "sum", \
        "entity_statop": "latest", \
        "fill_gaps": "null_value", \
        "gap_custom_alert_value": 0, \
        "gap_severity": "unknown", \
        "gap_severity_color": "#CCCCCC", \
        "gap_severity_color_light": "#EEEEEE", \
        "gap_severity_value": "-1", \
        "threshold_field": "num-persistent-queries", \
        "title": "Persistent queries", \
        "unit": "#"\
    }\
]
search_alert_earliest = 1
source_itsi_da = DA-ITSI-TELEGRAF-KAFKA
title = DA-ITSI-TELEGRAF-KAFKA:confluent-ksql-server

[DA-ITSI-TELEGRAF-KAFKA-confluent-schema-registry]
alert_lag = 30
alert_period = 1
base_search = | mstats latest(_value) as value WHERE `telegraf_kafka_index` `telegraf_kafka_schema_registry_kpi_constraints` jolokia_agent_url=* by metric_name, env, label, jolokia_agent_url span=1s\
| eval {metric_name}=value\
| stats first(kafka_schema-registry.*) as "*" by _time, env, label, jolokia_agent_url\
| rex field=jolokia_agent_url "//(?<kafka_schema_registry>[^:]*)\:"\
| eval kafka_schema_registry = env . ":" . label . ":" . kafka_schema_registry\
| fields _time, env, label, kafka_schema_registry, jersey-metrics.request-error-rate, jersey-metrics.request-rate, jersey-metrics.response-rate, jetty-metrics.connections-active, jetty-metrics.connections-closed-rate, jetty-metrics.connections-opened-rate, master-slave-role.master-slave-role
description = This KPI basesearch provides monitoring for the Confluent schema-registry component
entity_alias_filtering_fields = kafka_schema_registry
entity_id_fields = kafka_schema_registry
is_entity_breakdown = True
is_service_entity_filter = True
metrics = [\
    {\
        "_key": "Average_no_of_requests_sec_HTTP_error_responses", \
        "aggregate_statop": "avg", \
        "entity_statop": "avg", \
        "fill_gaps": "null_value", \
        "gap_custom_alert_value": 0, \
        "gap_severity": "unknown", \
        "gap_severity_color": "#CCCCCC", \
        "gap_severity_color_light": "#EEEEEE", \
        "gap_severity_value": "-1", \
        "threshold_field": "jersey-metrics.request-error-rate", \
        "title": "Average no of requests/sec HTTP error responses", \
        "unit": "#"\
    }, \
    {\
        "_key": "Average_rate_per_second_of_closed_Jetty_TCP_connections", \
        "aggregate_statop": "avg", \
        "entity_statop": "avg", \
        "fill_gaps": "null_value", \
        "gap_custom_alert_value": 0, \
        "gap_severity": "unknown", \
        "gap_severity_color": "#CCCCCC", \
        "gap_severity_color_light": "#EEEEEE", \
        "gap_severity_value": "-1", \
        "threshold_field": "connections-closed-rate", \
        "title": "Average rate per second of closed Jetty TCP connections", \
        "unit": "#"\
    }, \
    {\
        "_key": "Average_rate_per_second_of_opened_Jetty_TCP_connections", \
        "aggregate_statop": "avg", \
        "entity_statop": "avg", \
        "fill_gaps": "null_value", \
        "gap_custom_alert_value": 0, \
        "gap_severity": "unknown", \
        "gap_severity_color": "#CCCCCC", \
        "gap_severity_color_light": "#EEEEEE", \
        "gap_severity_value": "-1", \
        "threshold_field": "connections-opened-rate", \
        "title": "Average rate per second of opened Jetty TCP connections", \
        "unit": "#"\
    }, \
    {\
        "_key": "Average_request_latency_in_ms", \
        "aggregate_statop": "avg", \
        "entity_statop": "avg", \
        "fill_gaps": "null_value", \
        "gap_custom_alert_value": 0, \
        "gap_severity": "unknown", \
        "gap_severity_color": "#CCCCCC", \
        "gap_severity_color_light": "#EEEEEE", \
        "gap_severity_value": "-1", \
        "threshold_field": "jersey-metrics.request-latency-avg", \
        "title": "Average request latency in ms", \
        "unit": "ms"\
    }, \
    {\
        "_key": "Average_response_size_in_bytes", \
        "aggregate_statop": "avg", \
        "entity_statop": "avg", \
        "fill_gaps": "null_value", \
        "gap_custom_alert_value": 0, \
        "gap_severity": "unknown", \
        "gap_severity_color": "#CCCCCC", \
        "gap_severity_color_light": "#EEEEEE", \
        "gap_severity_value": "-1", \
        "threshold_field": "jersey-metrics.response-size-avg", \
        "title": "Average response size in bytes", \
        "unit": "byte"\
    }, \
    {\
        "_key": "Bytes_second_of_outgoing_responses", \
        "aggregate_statop": "avg", \
        "entity_statop": "avg", \
        "fill_gaps": "null_value", \
        "gap_custom_alert_value": 0, \
        "gap_severity": "unknown", \
        "gap_severity_color": "#CCCCCC", \
        "gap_severity_color_light": "#EEEEEE", \
        "gap_severity_value": "-1", \
        "threshold_field": "jersey-metrics.response-byte-rate", \
        "title": "Bytes/second of outgoing responses", \
        "unit": "bps"\
    }, \
    {\
        "_key": "Master_Slave_role", \
        "aggregate_statop": "max", \
        "entity_statop": "latest", \
        "fill_gaps": "null_value", \
        "gap_custom_alert_value": 0, \
        "gap_severity": "high", \
        "gap_severity_color": "#F26A35", \
        "gap_severity_color_light": "#FBCBB9", \
        "gap_severity_value": 5, \
        "threshold_field": "master-slave-role.master-slave-role", \
        "title": "Master/Slave role", \
        "unit": "#"\
    }, \
    {\
        "_key": "request-rate_-_avg_number_of_HTTP_requests_sec", \
        "aggregate_statop": "avg", \
        "entity_statop": "avg", \
        "fill_gaps": "null_value", \
        "gap_custom_alert_value": 0, \
        "gap_severity": "unknown", \
        "gap_severity_color": "#CCCCCC", \
        "gap_severity_color_light": "#EEEEEE", \
        "gap_severity_value": "-1", \
        "threshold_field": "jersey-metrics.request-rate", \
        "title": "request-rate - avg number of HTTP requests/sec", \
        "unit": "#"\
    }, \
    {\
        "_key": "response-rate_-_avg_number_of_HTTP_response_sec", \
        "aggregate_statop": "avg", \
        "entity_statop": "avg", \
        "fill_gaps": "null_value", \
        "gap_custom_alert_value": 0, \
        "gap_severity": "unknown", \
        "gap_severity_color": "#CCCCCC", \
        "gap_severity_color_light": "#EEEEEE", \
        "gap_severity_value": "-1", \
        "threshold_field": "jersey-metrics.response-rate", \
        "title": "response-rate - avg number of HTTP response/sec", \
        "unit": "#"\
    }, \
    {\
        "_key": "Total_number_of_active_Jetty_TCP_connections", \
        "aggregate_statop": "avg", \
        "entity_statop": "avg", \
        "fill_gaps": "null_value", \
        "gap_custom_alert_value": 0, \
        "gap_severity": "unknown", \
        "gap_severity_color": "#CCCCCC", \
        "gap_severity_color_light": "#EEEEEE", \
        "gap_severity_value": "-1", \
        "threshold_field": "connections-active", \
        "title": "Total number of active Jetty TCP connections", \
        "unit": "#"\
    }\
]
search_alert_earliest = 1
source_itsi_da = DA-ITSI-TELEGRAF-KAFKA
title = DA-ITSI-TELEGRAF-KAFKA:confluent-schema-registry

[DA-ITSI-TELEGRAF-KAFKA-kafka-consumers]
alert_lag = 30
alert_period = 1
base_search = | mstats latest(_value) as value where metric_name="burrow_group.lag" OR metric_name="burrow_group.status_code" `telegraf_kafka_index`group!="" group=* by env, label, group, metric_name span=10s\
| eval {metric_name}=value\
| stats first(burrow_group.*) as "*" by _time, env, label, group\
| eval kafka_group_consumer = env . ":" . label . ":" . group\
| fields _time, env, label, kafka_group_consumer, lag, status_code
description = This KPI basesearch provides insight monitoring for Kafka  consumers lag monitoring with Burrow
entity_id_fields = kafka_group_consumer
is_entity_breakdown = True
is_service_entity_filter = True
metrics = [\
    {\
        "_key": "Consumer_Lag", \
        "aggregate_statop": "avg", \
        "entity_statop": "latest", \
        "fill_gaps": "null_value", \
        "gap_custom_alert_value": 0, \
        "gap_severity": "unknown", \
        "gap_severity_color": "#CCCCCC", \
        "gap_severity_color_light": "#EEEEEE", \
        "gap_severity_value": "-1", \
        "threshold_field": "lag", \
        "title": "Consumer Lag", \
        "unit": "#"\
    }, \
    {\
        "_key": "Status_code", \
        "aggregate_statop": "max", \
        "entity_statop": "latest", \
        "fill_gaps": "custom_value", \
        "gap_custom_alert_value": "2", \
        "gap_severity": "unknown", \
        "gap_severity_color": "#CCCCCC", \
        "gap_severity_color_light": "#EEEEEE", \
        "gap_severity_value": "-1", \
        "threshold_field": "status_code", \
        "title": "Status code", \
        "unit": "#"\
    }\
]
search_alert_earliest = 1
source_itsi_da = DA-ITSI-TELEGRAF-KAFKA
title = DA-ITSI-TELEGRAF-KAFKA:kafka-consumers
